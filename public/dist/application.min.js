/*! MyApplication Version: 0.1.0-SNAPSHOT Copyright Asymmetrik, Ltd. 2015 - All Rights Reserved.*/
"use strict";var ApplicationConfiguration=function(){var applicationModuleName="app",applicationModuleVendorDependencies=["ngResource","ngAnimate","ui.router","ui.bootstrap","ui.utils","sentio.realtime","sentio"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();
"use strict";angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$logProvider",function($locationProvider,$logProvider){$locationProvider.hashPrefix("!"),$logProvider.debugEnabled(!1)}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])});
"use strict";ApplicationConfiguration.registerModule("app.core");
"use strict";ApplicationConfiguration.registerModule("asymmetrik.users");
"use strict";ApplicationConfiguration.registerModule("asymmetrik.util");
"use strict";angular.module("app.core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector){var $state=$injector.get("$state");$state.go("entries.list")}),$stateProvider.state("entries",{"abstract":!0,template:"<ui-view/>",resolve:{Configuration:["configService",function(configService){return configService.getConfig()}]}}).state("entries.list",{templateUrl:"",controller:""})}]);
"use strict";angular.module("app.core").controller("ClassificationController",["$scope","Authentication","authService","configService",function($scope,Authentication,authService,configService){$scope.auth=Authentication,configService.getConfig().then(function(result){$scope.classification=result.classification,$scope.classification.css="classification-"+result.classification.code})}]);
"use strict";angular.module("app.core").controller("FooterController",["$scope","Authentication","authService",function($scope,Authentication){$scope.auth=Authentication}]);
"use strict";angular.module("app.core").controller("HeaderController",["$scope","Authentication","authService","configService",function($scope,Authentication,authService,configService){$scope.auth=Authentication,configService.getConfig().then(function(result){$scope.classification=result.classification})}]);
"use strict";angular.module("app.core").service("configService",["$http","$q",function($http,$q){function getConfig(){return configDefer.promise}var configDefer=$q.defer();return $http({method:"get",url:"config"}).then(function(response){configDefer.resolve(response.data)},function(response){angular.isObject(response.data)&&null!=response.data.message||configDefer.reject("An unknown error occurred."),configDefer.reject(response.data.message)}),{getConfig:getConfig}}]);
"use strict";angular.module("asymmetrik.users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","$injector","Authentication",function($q,$location,$injector,Authentication){return{responseError:function(rejection){var $state=$injector.get("$state");switch(rejection.status){case 401:Authentication.setUser(null),$state.go("auth.signin");break;case 403:"eua"===rejection.data.type?$state.go("user.eua"):$state.go("user.unauthorized",{message:"You are not authorized to access this resource.",rejection:rejection})}return $q.reject(rejection)}}}])}]).run(["$rootScope","$state","$location","$log","Authentication",function($rootScope,$state,$location,$log,Authentication){$rootScope.$on("$stateChangeError",function(event){$log.warn(event)}),$rootScope.$on("$stateNotFound",function(event){$log.warn(event)}),$rootScope.$on("$stateChangeStart",function(event,toState){$log.info("routing to: "+toState.name);var requiresAuthentication=!0;if(null!=toState.data&&toState.data.requiresAuthentication===!1&&(requiresAuthentication=!1),requiresAuthentication&&!Authentication.isAuthenticated())return event.preventDefault(),$log.info("go to user.signin"),void $state.go("auth.signin");if(!Authentication.isAdmin()){var requiredRoles=null!=toState.data&&null!=toState.data.roles?toState.data.roles:[],missingRoles=[];if(requiredRoles.forEach(function(role){Authentication.hasRole(role)||missingRoles.push(role)}),missingRoles.length>0)if(Authentication.isAuthenticated()&&!Authentication.hasRole("user")){if("user.pending"!==toState.name)return event.preventDefault(),$log.info("go to user.pending"),void $state.go("user.pending")}else if("user.unauthorized"!==toState.name)return event.preventDefault(),$log.info("go to user.unauthorized"),void $state.go("user.unauthorized")}})}]);
"use strict";angular.module("asymmetrik.users").config(["$stateProvider",function($stateProvider){$stateProvider.state("auth",{"abstract":!0,template:"<ui-view/>",resolve:{UserConfig:["userService",function(userService){return userService.getAuthConfig()}]},data:{requiresAuthentication:!1}}).state("auth.signup",{url:"/auth/signup",controller:"ManageUserController",templateUrl:"app/users/views/manage-user.client.view.html",data:{mode:"signup"}}).state("auth.signin",{url:"/auth/signin",controller:"AuthenticationController",templateUrl:"app/users/views/authentication/signin.client.view.html"}).state("user",{"abstract":!0,template:"<ui-view/>",resolve:{UserConfig:["userService",function(userService){return userService.getAuthConfig()}]},data:{requiresAuthentication:!0}}).state("user.unauthorized",{url:"/auth/unauthorized",templateUrl:"app/users/views/authentication/unauthorized.client.view.html"}).state("user.pending",{url:"/auth/pending",templateUrl:"app/users/views/authentication/pending.client.view.html"}).state("user.edit",{url:"/user",controller:"ManageUserController",templateUrl:"app/users/views/manage-user.client.view.html",data:{mode:"edit"}}).state("admin",{"abstract":!0,templateUrl:"app/users/views/admin.client.view.html",resolve:{UserConfig:["userService",function(userService){return userService.getAuthConfig()}]},data:{requiresAuthentication:!0,roles:["admin"]}}).state("admin.user",{"abstract":!0,template:"<ui-view/>",data:{roles:["admin"]}}).state("admin.user.list",{url:"/admin/users",controller:"ListUsersController",templateUrl:"app/users/views/list-users.client.view.html",data:{roles:["admin"]}}).state("admin.user.create",{url:"/admin/user",controller:"ManageUserController",templateUrl:"app/users/views/manage-user.client.view.html",data:{mode:"admin-create",roles:["admin"]}}).state("admin.user.edit",{url:"/admin/user/:userId",controller:"ManageUserController",templateUrl:"app/users/views/manage-user.client.view.html",data:{mode:"admin-edit",roles:["admin"]}}).state("auth.password",{"abstract":!0,template:"<ui-view/>",resolve:{UserConfig:["userService",function(userService){return userService.getAuthConfig()}]},data:{strategy:"local"}}).state("auth.password.forgot",{url:"/auth/password/forgot",controller:"PasswordController",templateUrl:"app/users/views/password/forgot-password.client.view.html"}).state("auth.password.reset-invalid",{url:"/auth/password/reset/invalid",templateUrl:"app/users/views/password/reset-password-invalid.client.view.html"}).state("auth.password.reset-success",{url:"/auth/password/reset/success",templateUrl:"app/users/views/password/reset-password-success.client.view.html"}).state("auth.password.reset",{url:"/auth/password/reset/:token",controller:"PasswordController",templateUrl:"app/users/views/password/reset-password.client.view.html"})}]);
"use strict";angular.module("asymmetrik.users").controller("AuthenticationController",["$scope","$location","Authentication","authService","UserConfig","Alerts",function($scope,$location,Authentication,authService,UserConfig,Alerts){$scope.auth=Authentication,$scope.config=UserConfig,$scope.alertService=Alerts,$scope.alertService.clearAll(),$scope.auth.isAuthenticated()&&$location.path("/"),$scope.signup=function(){if($scope.newPassword!==$scope.verifyPassword)return void $scope.alertService.addAlert("Passwords do not match.");var user={name:$scope.user.name,email:$scope.user.email,username:$scope.user.username,password:$scope.newPassword};authService.signup(user).then(function(){$location.path("/")},function(error){$scope.alertService.addAlert(error.message)})},$scope.signin=function(){authService.signin($scope.credentials).then(function(){$location.path("/")},function(error){$scope.error=error.message})}}]);
"use strict";angular.module("asymmetrik.users").controller("ListUsersController",["$scope","$location","$log","$modal","userService","adminService","Authentication","authService","UserConfig","Alerts",function($scope,$location,$log,$modal,userService,adminService,Authentication,authService,UserConfig,Alerts){$scope.auth=Authentication,$scope.config=UserConfig,$scope.alertService=Alerts,$scope.alertService.clearAll(),$scope.users=[],$scope.roles=$scope.auth.roles.list,$scope.search="",$scope.sort=userService.sort,$scope.results={pageNumber:0,pageSize:0,totalPages:0,totalSize:0,resolved:!1},$scope.options={pageNumber:0,pageSize:20,sort:$scope.sort.name},$scope.goToPage=function(pageNumber){$scope.options.pageNumber=Math.min($scope.results.totalPages-1,Math.max(pageNumber,0)),$scope.applySearch()},$scope.setPageSize=function(pageSize){$scope.options.pageSize=pageSize,$scope.applySearch()},$scope.setSort=function(sort){$scope.options.sort=sort,$scope.applySearch()},$scope.applySearchKeypress=function(keyEvent){13===keyEvent.which&&$scope.applySearch()},$scope.applySearch=function(){$scope.results.resolved=!1,adminService.search(void 0,$scope.search,{page:$scope.options.pageNumber,size:$scope.options.pageSize,sort:$scope.options.sort.sort,dir:$scope.options.sort.dir}).then(function(result){null!=result?($scope.users=result.elements,$scope.results.pageNumber=result.pageNumber,$scope.results.pageSize=result.pageSize,$scope.results.totalPages=result.totalPages,$scope.results.totalSize=result.totalSize):$scope.users=[],$scope.results.resolved=!0},function(error){$scope.alertService.add(error.message),$log.error(error),$scope.results.resolved=!0})},$scope.deleteUser=function(user){var params={message:'Are you sure you want to delete user: "'+user.username+'" ?',title:"Delete user?",ok:"Delete",cancel:"Cancel"},dialog=$modal.open({templateUrl:"app/util/views/confirm.client.view.html",controller:"ConfirmController",$scope:$scope,backdrop:"static",resolve:{params:function(){return params}}});dialog.result.then(function(){adminService.remove(user._id).then(function(){$scope.alertService.add("Deleted user: "+user.username,"success"),$scope.applySearch()},function(error){$scope.alertService.add(error.message)}),$log.info("delete user: "+user.username)})},$scope.applySearch()}]);
"use strict";angular.module("asymmetrik.users").controller("ManageUserController",["$scope","$location","$log","$stateParams","$state","userService","adminService","authService","Authentication","UserConfig","Alerts",function($scope,$location,$log,$stateParams,$state,userService,adminService,authService,Authentication,UserConfig){function createUserAdmin(){return $log.info("Create user: "+$scope.user.username),$scope.password!==$scope.verifyPassword?void($scope.error="Passwords do not match"):void adminService.create({username:$scope.user.username,name:$scope.user.name,email:$scope.user.email,roles:$scope.user.roles,password:$scope.password}).then(function(){$state.go("admin.user.list")},function(error){$scope.error=error.message})}function updateUserAdmin(){return $log.info("Edit user: "+$scope.user.username),$scope.password!==$scope.verifyPassword?void($scope.error="Passwords do not match"):void adminService.update({_id:$scope.user._id,username:$scope.user.username,name:$scope.user.name,email:$scope.user.email,roles:$scope.user.roles,password:$scope.password}).then(function(){$state.go("admin.user.list")},function(error){$scope.error=error.message})}function createUser(){return $log.info("Signup user: "+$scope.user.username),$scope.password!==$scope.verifyPassword?void($scope.error="Passwords do not match"):void authService.signup({username:$scope.user.username,name:$scope.user.name,email:$scope.user.email,roles:$scope.user.roles,password:$scope.password}).then(function(){$location.path("/")},function(error){$scope.error=error.message})}function updateUser(){return $log.info("Update user: "+$scope.user.username),$scope.password!==$scope.verifyPassword?void($scope.error="Passwords do not match."):void userService.update({username:$scope.user.username,name:$scope.user.name,email:$scope.user.email,password:$scope.password,currentPassword:$scope.currentPassword}).then(function(){$location.path("/")},function(error){$scope.error=error.message})}$scope.auth=Authentication,$scope.roles=$scope.auth.roles.list,$scope.config=UserConfig,$scope.mode=$state.current.data.mode,"admin-create"===$scope.mode?($scope.title="Create User",$scope.subtitle="Provide the required information to create a new user",$scope.okButtonText="Create",$scope.okAction=createUserAdmin,$scope.user={}):"admin-edit"===$scope.mode?($scope.title="Edit User",$scope.subtitle="Make changes to the user's information",$scope.okButtonText="Save",$scope.okAction=updateUserAdmin,adminService.get($stateParams.userId).then(function(result){$scope.user=result},function(){$log.error("User with id: "+$stateParams.userId+" does not exist.")})):"signup"===$scope.mode?($scope.title="New Account Request",$scope.subtitle="Provide the required information to request an account",$scope.okButtonText="Submit",$scope.okAction=createUser,$scope.user={}):"edit"===$scope.mode?($scope.title="Edit Profile",$scope.subtitle="Make changes to your profile information",$scope.okButtonText="Save",$scope.okAction=updateUser,$scope.user={name:$scope.auth.user.name,username:$scope.auth.user.username,email:$scope.auth.user.email}):($scope.user={},$log.error("Invalid mode"))}]);
"use strict";angular.module("asymmetrik.users").controller("PasswordController",["$scope","$stateParams","$state","$location","$log","Authentication","authService","UserConfig",function($scope,$stateParams,$state,$location,$log,Authentication,authService,UserConfig){$scope.auth=Authentication,$scope.config=UserConfig,$scope.error=null,$scope.success=null,$scope.pending=null,$scope.invalid=!1,$scope.auth.isAuthenticated()&&$location.path("/"),"local"!==$scope.config.auth&&$location.path("/"),null!=$stateParams.token&&authService.validateToken($stateParams.token).then(function(){$scope.invalid=!1},function(){$scope.invalid=!0}),$scope.requestPasswordReset=function(){return $scope.success=$scope.error=null,$scope.pending="Processing request...",null==$scope.username?void($scope.error="Missing username."):($log.info("Requesting password reset for user: "+$scope.username),void authService.forgotPassword($scope.username).then(function(result){$scope.username=null,$scope.success=result,$scope.pending=null},function(error){$scope.error=error.message,$scope.pending=null}))},$scope.resetPassword=function(){return $scope.success=$scope.error=null,$scope.password!==$scope.verifyPassword?void($scope.error="Passwords do not match."):void authService.resetPassword($stateParams.token,$scope.password).then(function(){$scope.password=null,$scope.verifyPassword=null,$state.go("auth.password.reset-success")},function(error){$scope.error=error.message})}}]);
"use strict";angular.module("asymmetrik.users").controller("SettingsController",["$scope","$location","Authentication","authService","userService",function($scope,$location,Authentication,authService,userService){$scope.auth=Authentication,$scope.user=$scope.auth.user,$scope.updateUserProfile=function(isValid){isValid?($scope.success=$scope.error=null,userService.update($scope.user).then(function(response){$scope.success=!0,$scope.auth.user=response,$scope.user=response},function(error){$scope.error=error.message})):$scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,authService.updatePassword($scope.passwordDetails).then(function(){$scope.success=!0,$scope.passwordDetails=null},function(error){$scope.error=error.message})}}]);
"use strict";angular.module("asymmetrik.users").filter("userTypeaheadFilter",function(){return function(user){return null!=user?user.name+" [ "+user.username+" ]":""}});
"use strict";angular.module("asymmetrik.users").factory("adminService",["$http","$q","$log",function($http,$q){function create(user){var request=$http({method:"post",url:"admin/user",data:user});return request.then(handleSuccess,handleFailure)}function get(id){var request=$http({method:"get",url:"admin/user/"+id});return request.then(handleSuccess,handleFailure)}function update(user){var request=$http({method:"post",url:"admin/user/"+user._id,data:user});return request.then(handleSuccess,handleFailure)}function remove(id){var request=$http({method:"delete",url:"admin/user/"+id});return request.then(handleSuccess,handleFailure)}function search(q,s,pageable){var request=$http({method:"post",url:"admin/users",data:{s:s,q:q},params:pageable});return request.then(handleSuccess,handleFailure)}function handleSuccess(response){return response.data}function handleFailure(response){return $q.reject(angular.isObject(response.data)&&null!=response.data.message?response.data:{message:"An unknown error occurred."})}return{create:create,get:get,update:update,remove:remove,search:search}}]);
"use strict";angular.module("asymmetrik.users").factory("Authentication",[function(){var data={user:void 0,eua:{},groups:{},isAdminOfAGroup:!1,isEditorOfAGroup:!1};return data.roles={map:{user:{label:"User",description:"Account is enabled, has access to the system",role:"user"},editor:{label:"Editor",description:"Can create and manage resources in the system",role:"editor"},admin:{label:"Admin",description:"Has full, unrestricted access to the system",role:"admin"}}},data.roles.list=[data.roles.map.user,data.roles.map.editor,data.roles.map.admin],data.isAuthenticated=function(){return null!=data.user&&null!=data.user.username},data.isEuaCurrent=function(){return null==data.eua||null==data.eua.published||null!=data.user.acceptedEua&&data.user.acceptedEua>=data.eua.published},data.hasRole=function(role){return null!=data.user&&null!=data.user.roles&&data.user.roles[role]},data.isAdmin=function(){return data.hasRole("admin")},data.isGroupEditor=function(){return data.hasRole("editor")},data.hasGroupRole=function(groupId,role){return data.user&&data.groups[groupId]&&data.groups[groupId].roles&&data.groups[groupId].roles[role]},data.hasGroupAdmin=function(groupId){return data.hasGroupRole(groupId,"admin")},data.hasGroupEdit=function(groupId){return data.hasGroupRole(groupId,"editor")},data.hasGroup=function(groupId){return null!=data.groups[groupId]&&null!=data.groups[groupId]._id},data.editableGroups=function(){return data.user.groups.filter(function(group){return data.hasGroupEdit(group._id)})},data.canManageGroup=function(groupId){return data.hasGroupAdmin(groupId)||data.isAdmin()},data.canManageGroups=function(){return data.isAdmin()||data.isGroupEditor()||data.isAdminOfAGroup},data.canCreateGroups=function(){return data.isAdmin()||data.isGroupEditor()},data.hasEditableGroups=function(){return data.isEditorOfAGroup},data.canCreateSubscriptions=function(){return data.isAdmin()||data.isEditorOfAGroup},data.canEditSubscriptions=function(groupId){return data.isAdmin()||data.hasGroupEdit(groupId)},data.setUser=function(user){(null==user||null==user.username)&&(user=null),data.user=user,data.groups={},null!=data.user&&null!=data.user.groups&&data.user.groups.forEach(function(group){data.groups[group._id]=group,null!=group.roles&&(group.roles.admin&&(data.isAdminOfAGroup=!0),group.roles.editor&&(data.isEditorOfAGroup=!0))})},data.setEua=function(eua){data.eua=eua},data.setUser(window.user),data}]),angular.module("asymmetrik.users").factory("authService",["$http","$q","$log","Authentication",function($http,$q,$log,Authentication){function getCurrentEua(){var request=$http({method:"get",url:"eua"});return request.then(function(result){return Authentication.setEua(result.data),result.data},handleFailure)}function acceptEua(){var request=$http({method:"post",url:"eua/accept"});return request.then(function(response){return Authentication.setUser(response.data),response.data},handleFailure)}function signup(user){var request=$http({method:"post",url:"auth/signup",data:user});return request.then(function(response){return Authentication.setUser(response.data),response.data},handleFailure)}function signin(credentials){var request=$http({method:"post",url:"auth/signin",data:credentials});return request.then(function(response){return Authentication.setUser(response.data),response.data},handleFailure)}function signout(){var request=$http({method:"get",url:"auth/signout"});return request.then(function(){return Authentication.setUser(null),null},handleFailure)}function getCurrentUser(){var request=$http({method:"get",url:"user/me"});return request.then(function(response){return Authentication.setUser(response.data),response.data},function(){})}function forgotPassword(username){var request=$http({method:"post",url:"auth/forgot",data:{username:username}});return request.then(function(response){return Authentication.setUser(response.data),response.data},handleFailure)}function validateToken(token){var request=$http({method:"get",url:"auth/reset/"+token});return request.then(function(response){return response.data},handleFailure)}function resetPassword(token,password){var request=$http({method:"post",url:"auth/reset/"+token,data:{password:password}});return request.then(function(response){return Authentication.setUser(response.data),response.data},handleFailure)}function updatePassword(data){var request=$http({method:"post",url:"/auth/password",data:data});return request.then(function(response){return response.data},handleFailure)}function handleFailure(response){return $q.reject(angular.isObject(response.data)&&null!=response.data.message?response.data:{message:"An unknown error occurred."})}return null!=Authentication.user&&(getCurrentUser(),getCurrentEua()),{getCurrentUser:getCurrentUser,signup:signup,signin:signin,signout:signout,forgotPassword:forgotPassword,resetPassword:resetPassword,validateToken:validateToken,updatePassword:updatePassword,getCurrentEua:getCurrentEua,acceptEua:acceptEua}}]);
"use strict";angular.module("asymmetrik.users").factory("userService",["$http","$q","$log","Authentication",function($http,$q,$log,Authentication){function getAuthConfig(){var request=$http({method:"get",url:"user/config"});return request.then(handleSuccess,handleFailure)}function get(id){var request=$http({method:"get",url:"user/"+id});return request.then(handleSuccess,handleFailure)}function update(user){var request=$http({method:"post",url:"user/me",data:user});return request.then(function(response){return Authentication.setUser(response.data),response.data},handleFailure)}function search(q,s,pageable){var request=$http({method:"post",url:"users",data:{s:s,q:q},params:pageable});return request.then(handleSuccess,handleFailure)}function match(q,s,pageable){var request=$http({method:"post",url:"users/match",data:{s:s,q:q},params:pageable});return request.then(handleSuccess,handleFailure)}function handleSuccess(response){return response.data}function handleFailure(response){return $q.reject(angular.isObject(response.data)&&null!=response.data.message?response.data:{message:"An unknown error occurred."})}return{sort:{name:{label:"Name",sort:"name",dir:"ASC"},username:{label:"Username",sort:"username",dir:"ASC"},created:{label:"Created",sort:"created",dir:"DESC"},relevance:{label:"Relevance",sort:"score",dir:"DESC"}},get:get,update:update,search:search,match:match,getAuthConfig:getAuthConfig}}]);
"use strict";angular.module("asymmetrik.util").controller("ConfirmController",["$scope","$modalInstance","$log","params",function($scope,$modalInstance,$log,params){$scope.title=params.title,$scope.message=params.message,$scope.okText=params.ok,$scope.cancelText=params.cancel,$scope.ok=function(){$modalInstance.close()},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]);
"use strict";angular.module("asymmetrik.util").filter("agoDateFilter",function(){return function(date){return null!=date?moment(date).fromNow():"unknown"}});
"use strict";angular.module("asymmetrik.util").filter("areaFilter",["$filter",function($filter){return function(metersSquaredDistance){var areakm=metersSquaredDistance/1e6;return null!=metersSquaredDistance?areakm>=1e6?$filter("number")(areakm/1e6,1)+" M":$filter("number")(areakm,0):""}}]);
"use strict";angular.module("asymmetrik.util").filter("dateDiffFilter",function(){return function(toDate,fromDate){return null!=toDate&&null!=fromDate?moment(toDate).from(fromDate,!0):"unknown"}});
"use strict";angular.module("asymmetrik.util").filter("durationFilter",function(){function isNumeric(obj){return"[object Array]"!==Object.prototype.toString.call(obj)&&obj-parseFloat(obj)+1>=0}return function(duration){return null!=duration&&isNumeric(duration)?1e3>duration?duration+" ms":12e4>duration?Math.floor(duration/1e3)+" seconds":moment.duration(duration).humanize():"unknown"}});
"use strict";angular.module("asymmetrik.util").factory("Alerts",["$timeout",function($timeout){function clearAllAlerts(){for(var i=0;i<data.alerts.list.length;i++)data.alerts.list.pop();data.alerts.map={}}function clearAlert(index){var alert=data.alerts.list[index];data.alerts.list.splice(index,1),delete data.alerts.map[alert.id]}function clearAlertById(id){var alert=data.alerts.map[id];if(null!=alert){var index=data.alerts.list.indexOf(alert);clearAlert(index)}}function addAlert(msg,type,ttl){var alert={id:data.id++,type:type||data.defaultType,msg:msg};data.alerts.list.push(alert),data.alerts.map[alert.id]=alert,null!=ttl&&$timeout(function(){clearAlertById(alert.id)},ttl)}var data={id:0,alerts:{list:[],map:{}},defaultType:"danger"};return{alerts:data.alerts.list,clearAll:clearAllAlerts,clear:clearAlert,add:addAlert}}]);