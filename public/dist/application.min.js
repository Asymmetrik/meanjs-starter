/*! WildfireEmber Version: 0.1.0-SNAPSHOT Copyright Asymmetrik, Ltd. 2015 - All Rights Reserved.*/
"use strict";var ApplicationConfiguration=function(){var applicationModuleName="wildfire_ember",applicationModuleVendorDependencies=["ngResource","ngAnimate","textAngular","ui.router","ui.bootstrap","ui.utils","sentio.realtime","sentio"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();
"use strict";angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$logProvider",function($locationProvider,$logProvider){$locationProvider.hashPrefix("!"),$logProvider.debugEnabled(!1)}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])});
"use strict";ApplicationConfiguration.registerModule("app.core");
"use strict";ApplicationConfiguration.registerModule("asymmetrik.groups");
"use strict";ApplicationConfiguration.registerModule("asymmetrik.help");
"use strict";ApplicationConfiguration.registerModule("asymmetrik.reports");
"use strict";ApplicationConfiguration.registerModule("asymmetrik.users");
"use strict";ApplicationConfiguration.registerModule("asymmetrik.util");
"use strict";angular.module("app.core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector){var $state=$injector.get("$state");$state.go("report.list")})}]);
"use strict";angular.module("app.core").controller("CoreController",["$scope","Authentication","authService","configService",function($scope,Authentication,authService,configService){$scope.auth=Authentication,configService.getConfig().then(function(result){$scope.classification=result.classification,$scope.classification.css="classification-"+result.classification.code,$scope.copyright=result.copyright})}]);
"use strict";angular.module("app.core").service("configService",["$http","$q",function($http,$q){function getConfig(){return configDefer.promise}var configDefer=$q.defer();return $http({method:"get",url:"config"}).then(function(response){configDefer.resolve(response.data)},function(response){angular.isObject(response.data)&&null!=response.data.message||configDefer.reject("An unknown error occurred."),configDefer.reject(response.data.message)}),{getConfig:getConfig}}]);
"use strict";angular.module("asymmetrik.groups").config(["$stateProvider","$urlRouterProvider",function($stateProvider){$stateProvider.state("group",{"abstract":!0,template:"<ui-view/>"}).state("group.list",{url:"/groups",controller:"ListGroupsController",templateUrl:"app/groups/views/list-groups.client.view.html"}).state("group.create",{url:"/group/create",controller:"ManageGroupController",templateUrl:"app/groups/views/manage-group.client.view.html",resolve:{UserConfig:["userService",function(userService){return userService.getAuthConfig()}]},data:{roles:["editor"]}}).state("group.edit",{url:"/group:groupId/edit",controller:"ManageGroupController",templateUrl:"app/groups/views/manage-group.client.view.html"}).state("group.manage-users",{url:"/group:groupId/manage-users",controller:"ManageGroupUsersController",templateUrl:"app/groups/views/manage-group-users.client.view.html"})}]);
"use strict";angular.module("asymmetrik.groups").controller("ListGroupsController",["$scope","$location","$state","$stateParams","$log","$modal","Authentication","authService","groupService","Alerts",function($scope,$location,$state,$stateParams,$log,$modal,Authentication,authService,groupService,Alerts){$scope.title="Groups",$scope.subtitle="Manage group-based access control",$scope.auth=Authentication,$scope.alertService=Alerts,$scope.alertService.clearAll(),$scope.groups=[],$scope.search="",$scope.sort=groupService.sort,$scope.results={pageNumber:0,pageSize:0,totalPages:0,totalSize:0,resolved:!1},$scope.options={pageNumber:0,pageSize:12,sort:$scope.sort.map.title},$scope.remove=function(group){var params={message:'Are you sure you want to delete the group: <strong>"'+group.title+'"</strong>?<br/>This action cannot be undone.',title:"Delete group?",ok:"Delete",cancel:"Cancel"},dialog=$modal.open({templateUrl:"app/util/views/confirm.client.view.html",controller:"ConfirmController",$scope:$scope,backdrop:"static",resolve:{params:function(){return params}}});dialog.result.then(function(){groupService.remove(group._id).then(function(){$log.info("deleted group: "+group._id),$scope.applySearch()},function(error){$log.error("Failed to delete group: "+error),$scope.alertService.add("Error deleting group: "+error)})})},$scope.goToPage=function(pageNumber){$scope.options.pageNumber=Math.min($scope.results.totalPages-1,Math.max(pageNumber,0)),$scope.applySearch()},$scope.setPageSize=function(pageSize){$scope.options.pageSize=pageSize,$scope.applySearch()},$scope.setSort=function(sort){$scope.options.sort=sort,$scope.applySearch()},$scope.applySearchKeypress=function(keyEvent){13===keyEvent.which&&$scope.applySearch()},$scope.applySearch=function(){var query={};$scope.results.resolved=!1,groupService.search(query,$scope.search,{page:$scope.options.pageNumber,size:$scope.options.pageSize,sort:$scope.options.sort.sort,dir:$scope.options.sort.dir}).then(function(result){null!=result?($scope.groups=result.elements,$scope.results.pageNumber=result.pageNumber,$scope.results.pageSize=result.pageSize,$scope.results.totalPages=result.totalPages,$scope.results.totalSize=result.totalSize):$scope.groups=[],$scope.results.resolved=!0},function(error){$log.error(error),$scope.results.resolved=!0})},$scope.applySearch()}]);
"use strict";angular.module("asymmetrik.groups").controller("ManageGroupUsersController",["$scope","$state","$log","$modal","$stateParams","$q","userService","groupService","Help","Alerts","Authentication",function($scope,$state,$log,$modal,$stateParams,$q,userService,groupService,Help,Alerts,Authentication){function doToggleRole(user,role){var fn=user.groups[0].roles[role]?groupService.removeUserRole:groupService.addUserRole;return user.groups[0].roles[role]=!user.groups[0].roles[role],fn(groupId,user._id,role).then(function(result){return $log.info("Toggled role: "+role+" for user: "+user.name),result},function(error){$log.error("Error while toggling role: "+error),$scope.alertService.add("Error while toggling role: "+error),user.groups[0].roles[role]=!user.groups[0].roles[role],$q.reject(error)})}var groupId=$stateParams.groupId;$scope.auth=Authentication,$scope.alertService=Alerts,$scope.alertService.clearAll(),$scope.help=Help,$scope.addingUser=!1,$scope.roles=groupService.roles,$scope.group={},$scope.members={sort:userService.sort,results:{pageNumber:0,pageSize:0,totalPages:0,totalSize:0,elements:[]},options:{pageNumber:0,pageSize:25,sort:userService.sort.map.name}},$scope.goToPage=function(pageNumber){$scope.options.pageNumber=Math.min($scope.results.totalPages-1,Math.max(pageNumber,0)),$scope.applySearch()},$scope.applyMemberSearch=function(){groupService.searchMembers(groupId,void 0,void 0,{page:$scope.members.options.pageNumber,size:$scope.members.options.pageSize,sort:$scope.members.options.sort.sort,dir:$scope.members.options.sort.dir}).then(function(result){$scope.members.results=null!=result?result:{}},function(error){$scope.alertService.add(error.message),$log.error(error)})},$scope.searchUsers=function(search){return userService.match({"groups._id":{$ne:groupId}},search,{page:0,size:20,sort:userService.sort.map.name.sort,dir:userService.sort.map.name.dir}).then(function(result){return null!=result?result.elements:[]},function(error){return $log.error(error),[]})},$scope.addUserKeypress=function(keyEvent){13===keyEvent.which&&$scope.addUser($scope.user)},$scope.addUser=function(user){null!=groupId&&null!=user&&($scope.addingUser=!0,groupService.addUser(groupId,user._id).then(function(){$scope.user=null,$scope.addingUser=!1,$log.info("Added user: "+user.name+" to group: "+groupId),$scope.applyMemberSearch()},function(error){$log.error(error),$scope.alertService.add("Add user operation failed: "+error,"error"),$scope.addingUser=!1}))},$scope.toggleRole=function(user,role){null==user.groups[0].roles&&(user.groups[0].roles={});var remove=user.groups[0].roles[role];if(remove&&"admin"===role&&user._id===$scope.auth.user._id&&!$scope.auth.isAdmin()){var params={message:'Are you sure you want to remove the "Group Admin" role from <strong>yourself</strong>?<br/>Once you do this, you will no longer be able to manage the members of this group. <strong>This also means you won\'t be able to give the role back to yourself</strong>.',title:'Remove "Group Admin" role?',ok:"Remove Role",cancel:"Cancel"},dialog=$modal.open({templateUrl:"app/util/views/confirm.client.view.html",controller:"ConfirmController",$scope:$scope,backdrop:"static",resolve:{params:function(){return params}}});dialog.result.then(function(){doToggleRole(user,role).then(function(){$state.go("group.list")})})}else doToggleRole(user,role)},$scope.removeUser=function(user){var params={message:'Are you sure you want to remove user: "'+user.username+'" from this group?',title:"Remove user from group?",ok:"Remove User",cancel:"Cancel"},dialog=$modal.open({templateUrl:"app/util/views/confirm.client.view.html",controller:"ConfirmController",$scope:$scope,backdrop:"static",resolve:{params:function(){return params}}});dialog.result.then(function(){groupService.removeUser(groupId,user._id).then(function(){$log.info("removed user: "+user.username),$scope.applyMemberSearch()},function(error){$log.error("Failed to remove user from group: "+error),$scope.alertService.add(error)})})},groupService.get(groupId).then(function(result){$scope.group=result},function(error){$log.error("There was an error getting the group: "+error)}),$scope.applyMemberSearch()}]);
"use strict";angular.module("asymmetrik.groups").controller("ManageGroupController",["$scope","$state","$stateParams","$log","Authentication","authService","groupService","Alerts",function($scope,$state,$stateParams,$log,Authentication,authService,groupService,Alerts){$scope.auth=Authentication,$scope.alertService=Alerts,$scope.alertService.clearAll(),$scope.mode={create:null==$stateParams.groupId,edit:null!=$stateParams.groupId},$scope.createFn=function(){$scope.error="",groupService.create($scope.group).then(function(){$state.go("group.list")},function(error){$scope.error=error,$log.error(error)})},$scope.saveFn=function(){$scope.error="",groupService.update($scope.group).then(function(){$state.go("group.list")},function(error){$scope.error=error,$log.error(error)})},$scope.mode.edit?($scope.title="Edit Group",$scope.subtitle="Modify and save basic group metadata",$scope.okButtonText="Save",$scope.okAction=$scope.saveFn,groupService.get($stateParams.groupId).then(function(result){$scope.group=result},function(error){$log.error(error)})):($scope.title="Create Group",$scope.subtitle="Provide some basic metadata to create a new group",$scope.okButtonText="Create",$scope.okAction=$scope.createFn)}]);
"use strict";angular.module("asymmetrik.groups").controller("ViewGroupController",["$rootScope","$scope","$log","$stateParams","$timeout","$q","$modal","Authentication","groupService",function($rootScope,$scope,$log,$stateParams,$timeout,$q,$modal,Authentication,groupService){groupService.get($stateParams.groupId).then(function(result){$scope.group=result},function(error){$log.error(error)})}]);
"use strict";angular.module("asymmetrik.groups").service("groupService",["$http","$q","$log","authService","Authentication",function($http,$q,$log,authService,Authentication){function create(group){var request=$http({method:"post",url:"group",data:group});return request.then(function(response){return authService.getCurrentUser(),response.data},handleFailure)}function get(id){var request=$http({method:"get",url:"group/"+id});return request.then(handleSuccess,handleFailure)}function update(group){var request=$http({method:"post",url:"group/"+group._id,data:group});return request.then(handleSuccess,handleFailure)}function remove(id){var request=$http({method:"delete",url:"group/"+id});return request.then(function(response){return authService.getCurrentUser(),response.data},handleFailure)}function search(q,s,pageable){var request=$http({method:"post",url:"groups",data:{s:s,q:q},params:pageable});return request.then(handleSuccess,handleFailure)}function list(){return search(void 0,void 0,{size:100}).then(function(result){return result.elements},handleFailure)}function searchMembers(groupId,q,s,pageable){var request=$http({method:"post",url:"group/"+groupId+"/users",data:{s:s,q:q},params:pageable});return request.then(handleSuccess,handleFailure)}function addUserRole(groupId,userId,role){var request=$http({method:"post",url:"group/"+groupId+"/user/"+userId+"/role",params:{role:role}});return request.then(function(response){return reloadUser(userId),response.data},handleFailure)}function removeUserRole(groupId,userId,role){var request=$http({method:"delete",url:"group/"+groupId+"/user/"+userId+"/role",params:{role:role}});return request.then(function(response){return reloadUser(userId),response.data},handleFailure)}function addUser(groupId,userId){var request=$http({method:"post",url:"group/"+groupId+"/user/"+userId});return request.then(function(response){return reloadUser(userId),response.data},handleFailure)}function removeUser(groupId,userId){var request=$http({method:"delete",url:"group/"+groupId+"/user/"+userId});return request.then(function(response){return reloadUser(userId),response.data},handleFailure)}function reloadUser(userId){null!=Authentication.user&&Authentication.user._id===userId&&authService.getCurrentUser()}function handleSuccess(response){return response.data}function handleFailure(response){return $q.reject(angular.isObject(response.data)&&null!=response.data.message?response.data.message:"An unknown error occurred.")}var roles={};roles.map={admin:{label:"Group Admin",description:"This user can manage the membership and metadata of the group",role:"admin"},editor:{label:"Report Editor",description:"This user can create/edit/delete reports within this group",role:"editor"}},roles.array=[roles.map.admin,roles.map.editor];var sort={};return sort.map={title:{label:"Title",sort:"title",dir:"ASC"},relevance:{label:"Relevance",sort:"score",dir:"DESC"}},sort.array=[sort.map.title,sort.map.relevance],{roles:roles,sort:sort,create:create,get:get,list:list,search:search,update:update,remove:remove,searchMembers:searchMembers,addUser:addUser,removeUser:removeUser,addUserRole:addUserRole,removeUserRole:removeUserRole}}]);
"use strict";angular.module("asymmetrik.help").config(["$stateProvider","$urlRouterProvider",function($stateProvider){function addTopic(topic){$stateProvider.state(topic.state,{url:topic.url,templateUrl:topic.templateUrl,controller:["$scope","config",function($scope,config){$scope.version=config.version}]})}var topics=[{title:"Getting Started",id:"overview"}];topics.forEach(function(topic){topic.id=topic.id||topic.title.toLowerCase(),topic.state="help."+topic.id,topic.url="/help/"+topic.id,topic.templateUrl="app/help/views/"+topic.id+"/"+topic.id+".client.view.html"}),$stateProvider.state("help",{"abstract":!0,templateUrl:"app/help/views/help.client.view.html",controller:["$scope","$state","config",function($scope,$state,config){$scope.version=config.version,$scope.topics=$state.current.data.topics}],resolve:{config:["configService",function(configService){return configService.getConfig()}]},data:{topics:topics,requiresAuthentication:!0}}).state("about",{url:"/help/about",templateUrl:"app/help/views/about.client.view.html",controller:["$scope","$state","config",function($scope,$state,config){$scope.version=config.version}],resolve:{config:["configService",function(configService){return configService.getConfig()}]},data:{requiresAuthentication:!0}}),topics.forEach(function(topic){addTopic(topic)})}]);
"use strict";angular.module("asymmetrik.help").service("Help",["$modal","$log",function($modal){function modal(id){$modal.open({templateUrl:"app/help/views/templates/modal.client.view.html",backdrop:"true",controller:["$scope","$state","$modalInstance","template",function($scope,$state,$modalInstance,template){$scope.template=template,$scope.ok=function(){$modalInstance.close()},$scope.help=function(){$modalInstance.close(),$state.go("help.overview")}}],resolve:{template:function(){return"app/help/views/"+id+".client.view.html"}}})}return{modal:modal}}]);
"use strict";angular.module("asymmetrik.reports").config(["$stateProvider",function($stateProvider){$stateProvider.state("report",{"abstract":!0,template:"<ui-view/>"}).state("report.list",{url:"/reports",templateUrl:"app/reports/views/list-reports.client.view.html",controller:"ListReportsController",data:{roles:["user"]}}).state("report.create",{url:"/report/create",templateUrl:"app/reports/views/manage-report.client.view.html",controller:"ManageReportController",data:{roles:["user"],mode:"create"},resolve:{Groups:["groupService",function(groupService){return groupService.list()}]}}).state("report.edit",{url:"/report:reportId/edit",templateUrl:"app/reports/views/manage-report.client.view.html",controller:"ManageReportController",data:{roles:["user"],mode:"edit"},resolve:{Groups:["groupService",function(groupService){return groupService.list()}]}}).state("report.view",{url:"/report:reportId",templateUrl:"app/reports/views/view-report.client.view.html",controller:"ViewReportController",data:{requiresAuthentication:!1}})}]);
"use strict";angular.module("asymmetrik.reports").controller("ListReportsController",["$scope","$location","$log","$modal","reportService","Authentication","Alerts",function($scope,$location,$log,$modal,reportService,Authentication,Alerts){$scope.auth=Authentication,$scope.alertService=Alerts,$scope.alertService.clearAll(),$scope.reports=[],$scope.search="",$scope.sort=reportService.sort,$scope.results={pageNumber:0,pageSize:0,totalPages:0,totalSize:0,resolved:!1},$scope.options={pageNumber:0,pageSize:20,sort:$scope.sort.map.title},$scope.goToPage=function(pageNumber){$scope.options.pageNumber=Math.min($scope.results.totalPages-1,Math.max(pageNumber,0)),$scope.applySearch()},$scope.setPageSize=function(pageSize){$scope.options.pageSize=pageSize,$scope.applySearch()},$scope.setSort=function(sort){$scope.options.sort=sort,$scope.applySearch()},$scope.applySearchKeypress=function(keyEvent){13===keyEvent.which&&$scope.applySearch()},$scope.toggleReport=function(report){reportService.setActive(report._id,!report.active).then(function(){$log.info("Toggled report: "+report._id),$scope.applySearch()},function(error){$log.error("Failed to toggle report: "+error),$scope.alertService.add("Error toggling report: "+error)})},$scope.runReport=function(report){reportService.runReport(report._id).then(function(){$log.info("Ran report: "+report._id),$scope.applySearch()},function(error){$log.error("Failed to run report: "+error),$scope.alertService.add("Error running report: "+error)})},$scope.remove=function(report){var params={message:'Are you sure you want to delete the report: <strong>"'+report.title+'"</strong>?<br/>This action cannot be undone.',title:"Delete report?",ok:"Delete",cancel:"Cancel"},dialog=$modal.open({templateUrl:"app/util/views/confirm.client.view.html",controller:"ConfirmController",$scope:$scope,backdrop:"static",resolve:{params:function(){return params}}});dialog.result.then(function(){reportService.remove(report._id).then(function(){$log.info("deleted report: "+report._id),$scope.applySearch()},function(error){$log.error("Failed to delete report: "+error),$scope.alertService.add("Error deleting report: "+error)})})},$scope.applySearch=function(){$scope.results.resolved=!1,reportService.search(void 0,$scope.search,{page:$scope.options.pageNumber,size:$scope.options.pageSize,sort:$scope.options.sort.sort,dir:$scope.options.sort.dir}).then(function(result){null!=result?($scope.reports=result.elements,$scope.results.pageNumber=result.pageNumber,$scope.results.pageSize=result.pageSize,$scope.results.totalPages=result.totalPages,$scope.results.totalSize=result.totalSize):$scope.reports=[],$scope.results.resolved=!0},function(error){$scope.alertService.add(error.message),$log.error(error),$scope.results.resolved=!0})},$scope.toggleReportEnabled=function(report){reportService.setEnabled(report._id,!report.enabled).then(function(){$scope.applySearch(),$scope.alertService.add("Toggled enable for "+report.title,"success")},function(error){$scope.alertService.add(error.message)})},$scope.applySearch()}]);
"use strict";angular.module("asymmetrik.reports").controller("ManageReportController",["$scope","$location","$log","$stateParams","$state","reportService","Groups","Authentication","Alerts",function($scope,$location,$log,$stateParams,$state,reportService,Groups,Authentication){function createReport(){$log.info("Create report: "+$scope.report.title),reportService.create($scope.report).then(function(){$state.go("report.list")},function(error){$scope.error=error.message})}function updateReport(){$log.info("Edit report: "+$scope.report.title),reportService.update($scope.report).then(function(){$state.go("report.list")},function(error){$scope.error=error.message})}$scope.auth=Authentication,$scope.mode=$state.current.data.mode,$scope.periods=reportService.periods,$scope.groups=Groups,$scope.deleteUserFn=function(index){var newArr=$scope.report.criteriaUsers;newArr.splice(index,1),$scope.report.criteriaUsers=newArr.concat()},"create"===$scope.mode?($scope.title="Create Report",$scope.subtitle="Provide the required information to create a new report",$scope.okButtonText="Create",$scope.okAction=createReport,$scope.report={period:$scope.periods.map.day.value}):"edit"===$scope.mode?($scope.title="Edit Report",$scope.subtitle="Make changes to the report's information",$scope.okButtonText="Save",$scope.okAction=updateReport,reportService.get($stateParams.reportId).then(function(result){$scope.report=result},function(){$log.error("Report with id: "+$stateParams.reportId+" does not exist.")})):($scope.report={},$log.error("Invalid mode"))}]);
"use strict";angular.module("asymmetrik.reports").controller("ViewReportController",["$scope","$location","$log","$stateParams","Authentication","authService","Alerts","reportService",function($scope,$location,$log,$stateParams,Authentication,authService,Alerts,reportService){$scope.auth=Authentication,$scope.alertService=Alerts,$scope.alertService.clearAll(),reportService.recentActivity($stateParams.reportId).then(function(result){var processedActivity=reportService.processUserActivitySummary(result);$scope.report=result.report,$scope.users=processedActivity.users,$scope.current=processedActivity.current,$scope.previous=processedActivity.previous},function(){$log.error("Report with id: "+$stateParams.reportId+" does not exist.")});var sort={screenName:{id:"screenName",value:"screenName",reverse:!1},created:{id:"created",value:"current.p.createdDate",reverse:!0},friends:{id:"friends",value:"current.p.friendsCount",reverse:!0},friendsDelta:{id:"friendsDelta",value:"delta.friendsCount",reverse:!0},friendsDeltaPercent:{id:"friendsDeltaPercent",value:"delta.friendsPercent",reverse:!0},followers:{id:"followers",value:"current.p.followersCount",reverse:!0},followersDelta:{id:"followersDelta",value:"delta.followersCount",reverse:!0},followersDeltaPercent:{id:"followersDeltaPercent",value:"delta.followersPercent",reverse:!0},statuses:{id:"statuses",value:"current.p.statusesCount",reverse:!0},statusesDelta:{id:"statusesDelta",value:"delta.statusesCount",reverse:!0},statusesDeltaPercent:{id:"statusesDeltaPercent",value:"delta.statusesPercent",reverse:!0}};$scope.setSort=function(id){null!=$scope.sort&&$scope.sort.id===id?$scope.sort.reverse=!$scope.sort.reverse:($scope.sort={},$scope.sort.id=sort[id].id,$scope.sort.value=sort[id].value,$scope.sort.reverse=sort[id].reverse)},$scope.setSort(sort.screenName.id)}]);
"use strict";angular.module("asymmetrik.reports").filter("reportTypeaheadFilter",function(){return function(report){return null!=report?report.title:""}});
"use strict";angular.module("asymmetrik.reports").factory("reportService",["$http","$q","$log",function($http,$q){function create(report){var request=$http({method:"post",url:"report",data:report});return request.then(handleSuccess,handleFailure)}function get(id){var request=$http({method:"get",url:"report/"+id});return request.then(handleSuccess,handleFailure)}function search(q,s,pageable){var request=$http({method:"post",url:"reports",data:{s:s,q:q},params:pageable});return request.then(handleSuccess,handleFailure)}function update(report){var request=$http({method:"post",url:"report/"+report._id,data:report});return request.then(handleSuccess,handleFailure)}function remove(id){var request=$http({method:"delete",url:"report/"+id});return request.then(handleSuccess,handleFailure)}function setActive(id,active){var request=$http({method:"post",url:"report/"+id+"/active",params:{active:active}});return request.then(handleSuccess,handleFailure)}function runReport(id){var request=$http({method:"post",url:"report/"+id+"/run"});return request.then(handleSuccess,handleFailure)}function recentActivity(id){var request=$http({method:"post",url:"report/"+id+"/activity"});return request.then(handleSuccess,handleFailure)}function processProfileMetadata(profileMetadata){var toReturn={_id:profileMetadata._id,md:{ts:profileMetadata.ts,reportInstance:profileMetadata.reportInstance,screeName:profileMetadata.screenName,found:profileMetadata.found},p:{}};return null!=profileMetadata.payload?(toReturn.p.createdDate=null!=profileMetadata.payload.created_at?new Date(profileMetadata.payload.created_at):null,toReturn.p.favoritesCount=profileMetadata.payload.favourites_count,toReturn.p.followersCount=profileMetadata.payload.followers_count,toReturn.p.friendsCount=profileMetadata.payload.friends_count,toReturn.p.listedCount=profileMetadata.payload.listed_count,toReturn.p.statusesCount=profileMetadata.payload.statuses_count,toReturn.p.geoEnabled=profileMetadata.payload.geo_enabled,toReturn.p.lang=profileMetadata.payload.lang,toReturn.p.timezone=profileMetadata.payload.time_zone):(toReturn.p.createdDate=null,toReturn.p.favoritesCount=0,toReturn.p.followersCount=0,toReturn.p.friendsCount=0,toReturn.p.listedCount=0,toReturn.p.statusesCount=0,toReturn.p.geoEnabled=null,toReturn.p.lang=null,toReturn.p.timezone=null),toReturn}function processUserActivitySummary(recentActivity){var current,previous,users=[],reportInstances=recentActivity.reportInstances;null!=reportInstances&&(reportInstances.length>0&&(current=reportInstances[0]),reportInstances.length>1&&(previous=reportInstances[1]));var usersMap={};null!=recentActivity.report&&null!=recentActivity.report.criteriaUsers&&recentActivity.report.criteriaUsers.forEach(function(element){usersMap[element.toLowerCase()]={screenName:element}}),null!=recentActivity.profileMetadata&&recentActivity.profileMetadata.forEach(function(element){if(null!=element){var sn=element.screenName.toLowerCase();null==usersMap[sn]&&(usersMap[sn]={screenName:element.screenName}),usersMap[sn].screenName=element.screenName;var isCurrent=null!=current&&current._id===element.reportInstance,isPrevious=null!=previous&&previous._id===element.reportInstance,processedElement=processProfileMetadata(element);isCurrent?usersMap[sn].current=processedElement:isPrevious&&(usersMap[sn].previous=processedElement)}});for(var key in usersMap)users.push(usersMap[key]);return users.forEach(function(element){var current={friendsCount:0,followersCount:0,statusesCount:0},previous={friendsCount:0,followersCount:0,statusesCount:0},delta={};null!=element.current&&null!=element.current.p&&(current.friendsCount=element.current.p.friendsCount,current.followersCount=element.current.p.followersCount,current.statusesCount=element.current.p.statusesCount),null!=element.previous&&null!=element.previous.p&&(previous.friendsCount=element.previous.p.friendsCount,previous.followersCount=element.previous.p.followersCount,previous.statusesCount=element.previous.p.statusesCount),delta.friendsCount=current.friendsCount-previous.friendsCount,delta.friendsPercent=0!==previous.friendsCount?delta.friendsCount/previous.friendsCount:0,delta.followersCount=current.followersCount-previous.followersCount,delta.followersPercent=0!==previous.followersCount?delta.followersCount/previous.followersCount:0,delta.statusesCount=current.statusesCount-previous.statusesCount,delta.statusesPercent=0!==previous.statusesCount?delta.statusesCount/previous.statusesCount:0,element.delta=delta}),{users:users,current:current,previous:previous}}function handleSuccess(response){return response.data}function handleFailure(response){return $q.reject(angular.isObject(response.data)&&null!=response.data.message?response.data:{message:"An unknown error occurred."})}var sort={};sort.map={title:{label:"Name",sort:"name",dir:"ASC"},created:{label:"Created",sort:"created",dir:"DESC"},enabled:{label:"Enabled",sort:"enabled",dir:"DESC"},relevance:{label:"Relevance",sort:"score",dir:"DESC"}},sort.array=[sort.map.title,sort.map.created,sort.map.enabled,sort.map.relevance];var periods={};return periods.map={hour:{label:"every hour",value:36e5},sixHours:{label:"every 6 hours",value:216e5},twelveHours:{label:"every 12 hours",value:432e5},day:{label:"every day",value:864e5},week:{label:"every week",value:6048e5}},periods.array=[periods.map.hour,periods.map.sixHours,periods.map.twelveHours,periods.map.day,periods.map.week],{sort:sort,periods:periods,create:create,get:get,search:search,update:update,remove:remove,setActive:setActive,runReport:runReport,recentActivity:recentActivity,processUserActivitySummary:processUserActivitySummary}}]);
"use strict";angular.module("asymmetrik.users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","$injector","Authentication",function($q,$location,$injector,Authentication){return{responseError:function(rejection){var $state=$injector.get("$state");switch(rejection.status){case 401:Authentication.setUser(null),$state.go("auth.signin");break;case 403:"eua"===rejection.data.type?$state.go("user.eua"):$state.go("user.unauthorized",{message:"You are not authorized to access this resource.",rejection:rejection})}return $q.reject(rejection)}}}])}]).run(["$rootScope","$state","$location","$log","Authentication",function($rootScope,$state,$location,$log,Authentication){$rootScope.$on("$stateChangeError",function(event){$log.warn(event)}),$rootScope.$on("$stateNotFound",function(event){$log.warn(event)}),$rootScope.$on("$stateChangeStart",function(event,toState){$log.info("routing to: "+toState.name);var requiresAuthentication=!0;if(null!=toState.data&&toState.data.requiresAuthentication===!1&&(requiresAuthentication=!1),requiresAuthentication&&!Authentication.isAuthenticated())return event.preventDefault(),$log.info("go to user.signin"),void $state.go("auth.signin");if(Authentication.isAuthenticated()&&!Authentication.isAdmin()&&!Authentication.isEuaCurrent()&&"user.eua"!==toState.name)return event.preventDefault(),$log.info("go to user.eua"),void $state.go("user.eua");if(!Authentication.isAdmin()){var requiredRoles=null!=toState.data&&null!=toState.data.roles?toState.data.roles:[],missingRoles=[];if(requiredRoles.forEach(function(role){Authentication.hasRole(role)||missingRoles.push(role)}),missingRoles.length>0)if(Authentication.isAuthenticated()&&!Authentication.hasRole("user")){if("user.pending"!==toState.name)return event.preventDefault(),$log.info("go to user.pending"),void $state.go("user.pending")}else if("user.unauthorized"!==toState.name)return event.preventDefault(),$log.info("go to user.unauthorized"),void $state.go("user.unauthorized")}})}]);
"use strict";angular.module("asymmetrik.users").config(["$stateProvider",function($stateProvider){$stateProvider.state("auth",{"abstract":!0,template:"<ui-view/>",resolve:{UserConfig:["userService",function(userService){return userService.getAuthConfig()}]},data:{requiresAuthentication:!1}}).state("auth.signup",{url:"/auth/signup",controller:"ManageUserController",templateUrl:"app/users/views/manage-user.client.view.html",data:{mode:"signup"}}).state("auth.signin",{url:"/auth/signin",controller:"AuthenticationController",templateUrl:"app/users/views/authentication/signin.client.view.html"}).state("user",{"abstract":!0,template:"<ui-view/>",resolve:{UserConfig:["userService",function(userService){return userService.getAuthConfig()}]},data:{requiresAuthentication:!0}}).state("user.eua",{url:"/auth/eua",controller:"EuaController",templateUrl:"app/users/views/eua/eua.client.view.html",resolve:{UserAgreement:["authService",function(authService){return authService.getCurrentEua()}]}}).state("user.unauthorized",{url:"/auth/unauthorized",templateUrl:"app/users/views/authentication/unauthorized.client.view.html"}).state("user.pending",{url:"/auth/pending",templateUrl:"app/users/views/authentication/pending.client.view.html"}).state("user.edit",{url:"/user",controller:"ManageUserController",templateUrl:"app/users/views/manage-user.client.view.html",data:{mode:"edit"}}).state("admin",{"abstract":!0,templateUrl:"app/users/views/admin.client.view.html",resolve:{UserConfig:["userService",function(userService){return userService.getAuthConfig()}]},data:{requiresAuthentication:!0,roles:["admin"]}}).state("admin.eua",{"abstract":!0,template:"<ui-view/>",data:{roles:["admin"]}}).state("admin.eua.list",{url:"/admin/euas",controller:"ListEuasController",templateUrl:"app/users/views/eua/list-euas.client.view.html",data:{roles:["admin"]}}).state("admin.eua.create",{url:"/admin/eua",controller:"ManageEuaController",templateUrl:"app/users/views/eua/manage-eua.client.view.html",data:{mode:"create",roles:["admin"]}}).state("admin.eua.edit",{url:"/admin/eua/:euaId",controller:"ManageEuaController",templateUrl:"app/users/views/eua/manage-eua.client.view.html",data:{mode:"edit",roles:["admin"]}}).state("admin.user",{"abstract":!0,template:"<ui-view/>",data:{roles:["admin"]}}).state("admin.user.list",{url:"/admin/users",controller:"ListUsersController",templateUrl:"app/users/views/list-users.client.view.html",data:{roles:["admin"]}}).state("admin.user.create",{url:"/admin/user",controller:"ManageUserController",templateUrl:"app/users/views/manage-user.client.view.html",data:{mode:"admin-create",roles:["admin"]}}).state("admin.user.edit",{url:"/admin/user/:userId",controller:"ManageUserController",templateUrl:"app/users/views/manage-user.client.view.html",data:{mode:"admin-edit",roles:["admin"]}}).state("auth.password",{"abstract":!0,template:"<ui-view/>",resolve:{UserConfig:["userService",function(userService){return userService.getAuthConfig()}]},data:{strategy:"local"}}).state("auth.password.forgot",{url:"/auth/password/forgot",controller:"PasswordController",templateUrl:"app/users/views/password/forgot-password.client.view.html"}).state("auth.password.reset-invalid",{url:"/auth/password/reset/invalid",templateUrl:"app/users/views/password/reset-password-invalid.client.view.html"}).state("auth.password.reset-success",{url:"/auth/password/reset/success",templateUrl:"app/users/views/password/reset-password-success.client.view.html"}).state("auth.password.reset",{url:"/auth/password/reset/:token",controller:"PasswordController",templateUrl:"app/users/views/password/reset-password.client.view.html"})}]);
"use strict";angular.module("asymmetrik.users").controller("AuthenticationController",["$scope","$location","Authentication","authService","UserConfig","Alerts",function($scope,$location,Authentication,authService,UserConfig,Alerts){$scope.auth=Authentication,$scope.config=UserConfig,$scope.alertService=Alerts,$scope.alertService.clearAll(),$scope.auth.isAuthenticated()&&$location.path("/"),$scope.signup=function(){if($scope.newPassword!==$scope.verifyPassword)return void $scope.alertService.addAlert("Passwords do not match.");var user={name:$scope.user.name,email:$scope.user.email,username:$scope.user.username,password:$scope.newPassword};authService.signup(user).then(function(){$location.path("/")},function(error){$scope.alertService.addAlert(error.message)})},$scope.signin=function(){authService.signin($scope.credentials).then(function(){$location.path("/")},function(error){$scope.error=error.message})}}]);
"use strict";angular.module("asymmetrik.users").controller("EuaController",["$scope","$location","$log","Authentication","authService","Alerts","UserAgreement",function($scope,$location,$log,Authentication,authService,Alerts,UserAgreement){$scope.agree=!1,$scope.auth=Authentication,$scope.alertService=Alerts,$scope.alertService.clearAll(),$scope.eua=UserAgreement,$scope.accept=function(){authService.acceptEua().then(function(){$log.info("Accepted EUA for user."),$location.path("/")},function(error){$scope.alertService.addAlert(error.message)})}}]);
"use strict";angular.module("asymmetrik.users").controller("ListEuasController",["$scope","$location","$log","$modal","euaService","Authentication","Alerts",function($scope,$location,$log,$modal,euaService,Authentication,Alerts){$scope.auth=Authentication,$scope.alertService=Alerts,$scope.alertService.clearAll(),$scope.euas=[],$scope.search="",$scope.sort=euaService.sort,$scope.results={pageNumber:0,pageSize:0,totalPages:0,totalSize:0,resolved:!1},$scope.options={pageNumber:0,pageSize:20,sort:$scope.sort.map.published},$scope.goToPage=function(pageNumber){$scope.options.pageNumber=Math.min($scope.results.totalPages-1,Math.max(pageNumber,0)),$scope.applySearch()},$scope.setPageSize=function(pageSize){$scope.options.pageSize=pageSize,$scope.applySearch()},$scope.setSort=function(sort){$scope.options.sort=sort,$scope.applySearch()},$scope.applySearchKeypress=function(keyEvent){13===keyEvent.which&&$scope.applySearch()},$scope.applySearch=function(){$scope.results.resolved=!1,euaService.search(void 0,$scope.search,{page:$scope.options.pageNumber,size:$scope.options.pageSize,sort:$scope.options.sort.sort,dir:$scope.options.sort.dir}).then(function(result){null!=result?($scope.euas=result.elements,$scope.results.pageNumber=result.pageNumber,$scope.results.pageSize=result.pageSize,$scope.results.totalPages=result.totalPages,$scope.results.totalSize=result.totalSize):$scope.euas=[],$scope.results.resolved=!0},function(error){$scope.alertService.add(error.message),$log.error(error),$scope.results.resolved=!0})},$scope.deleteEua=function(eua){var params={message:'Are you sure you want to delete eua: "'+eua.title+'" ?',title:"Delete eua?",ok:"Delete",cancel:"Cancel"},dialog=$modal.open({templateUrl:"app/util/views/confirm.client.view.html",controller:"ConfirmController",$scope:$scope,backdrop:"static",resolve:{params:function(){return params}}});dialog.result.then(function(){euaService.remove(eua._id).then(function(){$scope.alertService.add("Deleted eua: "+eua.title,"success"),$scope.applySearch()},function(error){$scope.alertService.add(error.message)}),$log.info("delete eua: "+eua.title)})},$scope.publishEua=function(eua){euaService.publish(eua._id).then(function(){$scope.applySearch(),$scope.alertService.add("Published "+eua.title,"success")},function(error){$scope.alertService.add(error.message)})},$scope.applySearch()}]);
"use strict";angular.module("asymmetrik.users").controller("ListUsersController",["$scope","$location","$log","$modal","userService","adminService","Authentication","authService","UserConfig","Alerts",function($scope,$location,$log,$modal,userService,adminService,Authentication,authService,UserConfig,Alerts){$scope.auth=Authentication,$scope.config=UserConfig,$scope.alertService=Alerts,$scope.alertService.clearAll(),$scope.users=[],$scope.roles=$scope.auth.roles.array,$scope.search="",$scope.sort=userService.sort,$scope.results={pageNumber:0,pageSize:0,totalPages:0,totalSize:0,resolved:!1},$scope.options={pageNumber:0,pageSize:20,sort:$scope.sort.map.name},$scope.goToPage=function(pageNumber){$scope.options.pageNumber=Math.min($scope.results.totalPages-1,Math.max(pageNumber,0)),$scope.applySearch()},$scope.setPageSize=function(pageSize){$scope.options.pageSize=pageSize,$scope.applySearch()},$scope.setSort=function(sort){$scope.options.sort=sort,$scope.applySearch()},$scope.applySearchKeypress=function(keyEvent){13===keyEvent.which&&$scope.applySearch()},$scope.applySearch=function(){$scope.results.resolved=!1,adminService.search(void 0,$scope.search,{page:$scope.options.pageNumber,size:$scope.options.pageSize,sort:$scope.options.sort.sort,dir:$scope.options.sort.dir}).then(function(result){null!=result?($scope.users=result.elements,$scope.results.pageNumber=result.pageNumber,$scope.results.pageSize=result.pageSize,$scope.results.totalPages=result.totalPages,$scope.results.totalSize=result.totalSize):$scope.users=[],$scope.results.resolved=!0},function(error){$scope.alertService.add(error.message),$log.error(error),$scope.results.resolved=!0})},$scope.deleteUser=function(user){var params={message:'Are you sure you want to delete user: "'+user.username+'" ?',title:"Delete user?",ok:"Delete",cancel:"Cancel"},dialog=$modal.open({templateUrl:"app/util/views/confirm.client.view.html",controller:"ConfirmController",$scope:$scope,backdrop:"static",resolve:{params:function(){return params}}});dialog.result.then(function(){adminService.remove(user._id).then(function(){$scope.alertService.add("Deleted user: "+user.username,"success"),$scope.applySearch()},function(error){$scope.alertService.add(error.message)}),$log.info("delete user: "+user.username)})},$scope.applySearch()}]);
"use strict";angular.module("asymmetrik.users").controller("ManageEuaController",["$scope","$location","$log","$stateParams","$state","$modal","euaService","Authentication","Alerts",function($scope,$location,$log,$stateParams,$state,$modal,euaService,Authentication){function createEua(){$log.info("Create eua: "+$scope.eua.title),euaService.create({title:$scope.eua.title,text:$scope.eua.text}).then(function(){$state.go("admin.eua.list")},function(error){$scope.error=error.message})}function updateEua(){$log.info("Edit eua: "+$scope.eua.title),euaService.update({_id:$scope.eua._id,title:$scope.eua.title,text:$scope.eua.text,published:$scope.eua.published}).then(function(){$state.go("admin.eua.list")},function(error){$scope.error=error.message})}function previewEua(){$log.info("Preview eua: "+$scope.eua.title),$scope.preview=!0;var modalInstance=$modal.open({templateUrl:"app/users/views/eua/eua.client.view.html",scope:$scope}),close=function(){delete $scope.preview};modalInstance.result.then(close,close)}$scope.auth=Authentication,$scope.mode=$state.current.data.mode,$scope.previewAction=previewEua,"create"===$scope.mode?($scope.title="Create EUA",$scope.subtitle="Provide the required information to create a new eua",$scope.okButtonText="Create",$scope.okAction=createEua):"edit"===$scope.mode?($scope.title="Edit EUA",$scope.subtitle="Make changes to the eua's information",$scope.okButtonText="Save",$scope.okAction=updateEua,euaService.get($stateParams.euaId).then(function(result){$scope.eua=result},function(){$log.error("EUA with id: "+$stateParams.euaId+" does not exist.")})):($scope.user={},$log.error("Invalid mode"))}]);
"use strict";angular.module("asymmetrik.users").controller("ManageUserController",["$scope","$location","$log","$stateParams","$state","userService","adminService","authService","configService","Authentication","UserConfig","Alerts",function($scope,$location,$log,$stateParams,$state,userService,adminService,authService,configService,Authentication,UserConfig){function validateInput(){return $scope.user.password!==$scope.user.verifyPassword?($scope.error="Passwords do not match",!1):!0}function createUserAdmin(){$log.info("Create user: "+$scope.user.username),validateInput()&&adminService.create($scope.user).then(function(){$state.go("admin.user.list")},function(error){$scope.error=error.message})}function updateUserAdmin(){$log.info("Edit user: "+$scope.user.username),validateInput()&&adminService.update($scope.user).then(function(){$state.go("admin.user.list")},function(error){$scope.error=error.message})}function createUser(){$log.info("Signup user: "+$scope.user.username),validateInput()&&authService.signup($scope.user).then(function(){$location.path("/")},function(error){$scope.error=error.message})}function updateUser(){$log.info("Update user: "+$scope.user.username),validateInput()&&userService.update($scope.user).then(function(){$location.path("/")},function(error){$scope.error=error.message})}$scope.auth=Authentication,$scope.roles=$scope.auth.roles,$scope.config=UserConfig,$scope.mode=$state.current.data.mode,"admin-create"===$scope.mode?($scope.title="Create User",$scope.subtitle="Provide the required information to create a new user",$scope.okButtonText="Create",$scope.okAction=createUserAdmin,$scope.user={}):"admin-edit"===$scope.mode?($scope.title="Edit User",$scope.subtitle="Make changes to the user's information",$scope.okButtonText="Save",$scope.okAction=updateUserAdmin,adminService.get($stateParams.userId).then(function(result){$scope.user=result},function(){$log.error("User with id: "+$stateParams.userId+" does not exist.")})):"signup"===$scope.mode?($scope.title="New Account Request",$scope.subtitle="Provide the required information to request an account",$scope.okButtonText="Submit",$scope.okAction=createUser,$scope.user={}):"edit"===$scope.mode?($scope.title="Edit Profile",$scope.subtitle="Make changes to your profile information",$scope.okButtonText="Save",$scope.okAction=updateUser,$scope.user={name:$scope.auth.user.name,username:$scope.auth.user.username,email:$scope.auth.user.email}):($scope.user={},$log.error("Invalid mode"))}]);
"use strict";angular.module("asymmetrik.users").controller("PasswordController",["$scope","$stateParams","$state","$location","$log","Authentication","authService","UserConfig",function($scope,$stateParams,$state,$location,$log,Authentication,authService,UserConfig){$scope.auth=Authentication,$scope.config=UserConfig,$scope.error=null,$scope.success=null,$scope.pending=null,$scope.invalid=!1,$scope.auth.isAuthenticated()&&$location.path("/"),"local"!==$scope.config.auth&&$location.path("/"),null!=$stateParams.token&&authService.validateToken($stateParams.token).then(function(){$scope.invalid=!1},function(){$scope.invalid=!0}),$scope.requestPasswordReset=function(){return $scope.success=$scope.error=null,$scope.pending="Processing request...",null==$scope.username?void($scope.error="Missing username."):($log.info("Requesting password reset for user: "+$scope.username),void authService.forgotPassword($scope.username).then(function(result){$scope.username=null,$scope.success=result,$scope.pending=null},function(error){$scope.error=error.message,$scope.pending=null}))},$scope.resetPassword=function(){return $scope.success=$scope.error=null,$scope.password!==$scope.verifyPassword?void($scope.error="Passwords do not match."):void authService.resetPassword($stateParams.token,$scope.password).then(function(){$scope.password=null,$scope.verifyPassword=null,$state.go("auth.password.reset-success")},function(error){$scope.error=error.message})}}]);
"use strict";angular.module("asymmetrik.users").controller("SettingsController",["$scope","$location","Authentication","authService","userService",function($scope,$location,Authentication,authService,userService){$scope.auth=Authentication,$scope.user=$scope.auth.user,$scope.updateUserProfile=function(isValid){isValid?($scope.success=$scope.error=null,userService.update($scope.user).then(function(response){$scope.success=!0,$scope.auth.setUser(response)},function(error){$scope.error=error.message})):$scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,authService.updatePassword($scope.passwordDetails).then(function(){$scope.success=!0,$scope.passwordDetails=null},function(error){$scope.error=error.message})}}]);
"use strict";angular.module("asymmetrik.users").filter("userTypeaheadFilter",function(){return function(user){return null!=user?user.name+" [ "+user.username+" ]":""}});
"use strict";angular.module("asymmetrik.users").factory("adminService",["$http","$q","$log",function($http,$q){function create(user){var request=$http({method:"post",url:"admin/user",data:user});return request.then(handleSuccess,handleFailure)}function get(id){var request=$http({method:"get",url:"admin/user/"+id});return request.then(handleSuccess,handleFailure)}function update(user){var request=$http({method:"post",url:"admin/user/"+user._id,data:user});return request.then(handleSuccess,handleFailure)}function remove(id){var request=$http({method:"delete",url:"admin/user/"+id});return request.then(handleSuccess,handleFailure)}function search(q,s,pageable){var request=$http({method:"post",url:"admin/users",data:{s:s,q:q},params:pageable});return request.then(handleSuccess,handleFailure)}function handleSuccess(response){return response.data}function handleFailure(response){return $q.reject(angular.isObject(response.data)&&null!=response.data.message?response.data:{message:"An unknown error occurred."})}return{create:create,get:get,update:update,remove:remove,search:search}}]);
"use strict";angular.module("asymmetrik.users").factory("Authentication",[function(){var data={user:void 0,eua:{},groups:{},isAdminOfAGroup:!1,isEditorOfAGroup:!1};return data.roles={map:{user:{label:"User",description:"Account is enabled, has access to the system",role:"user"},editor:{label:"Editor",description:"Can create and manage resources in the system",role:"editor"},admin:{label:"Admin",description:"Has full, unrestricted access to the system",role:"admin"}}},data.roles.array=[data.roles.map.user,data.roles.map.editor,data.roles.map.admin],data.isAuthenticated=function(){return null!=data.user&&null!=data.user.username},data.isEuaCurrent=function(){return null==data.eua||null==data.eua.published||null!=data.user.acceptedEua&&data.user.acceptedEua>=data.eua.published},data.hasRole=function(role){return null!=data.user&&null!=data.user.roles&&data.user.roles[role]},data.isAdmin=function(){return data.hasRole("admin")},data.isGroupEditor=function(){return data.hasRole("editor")},data.hasGroupRole=function(groupId,role){return data.user&&data.groups[groupId]&&data.groups[groupId].roles&&data.groups[groupId].roles[role]},data.hasGroupAdmin=function(groupId){return data.hasGroupRole(groupId,"admin")},data.hasGroupEdit=function(groupId){return data.hasGroupRole(groupId,"editor")},data.hasGroup=function(groupId){return null!=data.groups[groupId]&&null!=data.groups[groupId]._id},data.editableGroups=function(){return data.user.groups.filter(function(group){return data.hasGroupEdit(group._id)})},data.canManageGroup=function(groupId){return data.hasGroupAdmin(groupId)||data.isAdmin()},data.canManageGroups=function(){return data.isAdmin()||data.isGroupEditor()||data.isAdminOfAGroup},data.canCreateGroups=function(){return data.isAdmin()||data.isGroupEditor()},data.hasEditableGroups=function(){return data.isEditorOfAGroup},data.canCreateReports=function(){return data.isAdmin()||data.isEditorOfAGroup},data.canEditReports=function(groupId){return data.isAdmin()||data.hasGroupEdit(groupId)},data.setUser=function(user){(null==user||null==user.username)&&(user=null),data.user=user,data.groups={},null!=data.user&&null!=data.user.groups&&data.user.groups.forEach(function(group){data.groups[group._id]=group,null!=group.roles&&(group.roles.admin&&(data.isAdminOfAGroup=!0),group.roles.editor&&(data.isEditorOfAGroup=!0))})},data.setEua=function(eua){data.eua=eua},data.setUser(window.user),data}]),angular.module("asymmetrik.users").factory("authService",["$http","$q","$log","Authentication",function($http,$q,$log,Authentication){function getCurrentEua(){var request=$http({method:"get",url:"eua"});return request.then(function(result){return Authentication.setEua(result.data),result.data},handleFailure)}function acceptEua(){var request=$http({method:"post",url:"eua/accept"});return request.then(function(response){return Authentication.setUser(response.data),response.data},handleFailure)}function signup(user){var request=$http({method:"post",url:"auth/signup",data:user});return request.then(function(response){return Authentication.setUser(response.data),response.data},handleFailure)}function signin(credentials){var request=$http({method:"post",url:"auth/signin",data:credentials});return request.then(function(response){return Authentication.setUser(response.data),response.data},handleFailure)}function signout(){var request=$http({method:"get",url:"auth/signout"});return request.then(function(){return Authentication.setUser(null),null},handleFailure)}function getCurrentUser(){var request=$http({method:"get",url:"user/me"});return request.then(function(response){return Authentication.setUser(response.data),response.data},function(){})}function forgotPassword(username){var request=$http({method:"post",url:"auth/forgot",data:{username:username}});return request.then(function(response){return Authentication.setUser(response.data),response.data},handleFailure)}function validateToken(token){var request=$http({method:"get",url:"auth/reset/"+token});return request.then(function(response){return response.data},handleFailure)}function resetPassword(token,password){var request=$http({method:"post",url:"auth/reset/"+token,data:{password:password}});return request.then(function(response){return Authentication.setUser(response.data),response.data},handleFailure)}function updatePassword(data){var request=$http({method:"post",url:"/auth/password",data:data});return request.then(function(response){return response.data},handleFailure)}function handleFailure(response){return $q.reject(angular.isObject(response.data)&&null!=response.data.message?response.data:{message:"An unknown error occurred."})}return null!=Authentication.user&&(getCurrentUser(),getCurrentEua()),{getCurrentUser:getCurrentUser,signup:signup,signin:signin,signout:signout,forgotPassword:forgotPassword,resetPassword:resetPassword,validateToken:validateToken,updatePassword:updatePassword,getCurrentEua:getCurrentEua,acceptEua:acceptEua}}]);
"use strict";angular.module("asymmetrik.users").factory("euaService",["$http","$q","$log",function($http,$q){function create(eua){var request=$http({method:"post",url:"eua",data:eua});return request.then(handleSuccess,handleFailure)}function get(id){var request=$http({method:"get",url:"eua/"+id});return request.then(handleSuccess,handleFailure)}function search(q,s,pageable){var request=$http({method:"post",url:"euas",data:{s:s,q:q},params:pageable});return request.then(handleSuccess,handleFailure)}function update(eua){var request=$http({method:"post",url:"eua/"+eua._id,data:eua});return request.then(handleSuccess,handleFailure)}function remove(id){var request=$http({method:"delete",url:"eua/"+id});return request.then(handleSuccess,handleFailure)}function publish(id){var request=$http({method:"post",url:"eua/"+id+"/publish"});return request.then(handleSuccess,handleFailure)}function handleSuccess(response){return response.data}function handleFailure(response){return $q.reject(angular.isObject(response.data)&&null!=response.data.message?response.data:{message:"An unknown error occurred."})}var sort={};return sort.map={title:{label:"Name",sort:"name",dir:"ASC"},created:{label:"Created",sort:"created",dir:"DESC"},published:{label:"Published",sort:"published",dir:"DESC"},relevance:{label:"Relevance",sort:"score",dir:"DESC"}},sort.array=[sort.map.title,sort.map.created,sort.map.published,sort.map.relevance],{sort:sort,create:create,get:get,search:search,update:update,remove:remove,publish:publish}}]);
"use strict";angular.module("asymmetrik.users").factory("userService",["$http","$q","$log","Authentication",function($http,$q,$log,Authentication){function getAuthConfig(){var request=$http({method:"get",url:"user/config"});return request.then(handleSuccess,handleFailure)}function get(id){var request=$http({method:"get",url:"user/"+id});return request.then(handleSuccess,handleFailure)}function update(user){var request=$http({method:"post",url:"user/me",data:user});return request.then(function(response){return Authentication.setUser(response.data),response.data},handleFailure)}function search(q,s,pageable){var request=$http({method:"post",url:"users",data:{s:s,q:q},params:pageable});return request.then(handleSuccess,handleFailure)}function match(q,s,pageable){var request=$http({method:"post",url:"users/match",data:{s:s,q:q},params:pageable});return request.then(handleSuccess,handleFailure)}function handleSuccess(response){return response.data}function handleFailure(response){return $q.reject(angular.isObject(response.data)&&null!=response.data.message?response.data:{message:"An unknown error occurred."})}var sort={};return sort.map={name:{label:"Name",sort:"name",dir:"ASC"},username:{label:"Username",sort:"username",dir:"ASC"},created:{label:"Created",sort:"created",dir:"DESC"},relevance:{label:"Relevance",sort:"score",dir:"DESC"}},sort.array=[sort.map.name,sort.map.username,sort.map.created,sort.map.relevance],{sort:sort,get:get,update:update,search:search,match:match,getAuthConfig:getAuthConfig}}]);
"use strict";angular.module("asymmetrik.util").controller("ConfirmController",["$scope","$modalInstance","$log","params",function($scope,$modalInstance,$log,params){$scope.title=params.title,$scope.message=params.message,$scope.okText=params.ok,$scope.cancelText=params.cancel,$scope.ok=function(){$modalInstance.close()},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]);
"use strict";angular.module("asymmetrik.util").filter("agoDateFilter",function(){return function(date){return null!=date?moment(date).fromNow():"unknown"}});
"use strict";angular.module("asymmetrik.util").filter("areaFilter",["$filter",function($filter){return function(metersSquaredDistance){var areakm=metersSquaredDistance/1e6;return null!=metersSquaredDistance?areakm>=1e6?$filter("number")(areakm/1e6,1)+" M":$filter("number")(areakm,0):""}}]);
"use strict";angular.module("asymmetrik.util").filter("dateDiffFilter",function(){return function(toDate,fromDate){return null!=toDate&&null!=fromDate?moment(toDate).from(fromDate,!0):"unknown"}});
"use strict";angular.module("asymmetrik.util").filter("durationFilter",function(){function isNumeric(obj){return"[object Array]"!==Object.prototype.toString.call(obj)&&obj-parseFloat(obj)+1>=0}return function(duration){return null==duration||!isNumeric(duration)&&null==duration.getTime?"unknown":(null!=duration.getTime&&(duration=duration.getTime()),1e3>duration?duration+" ms":12e4>duration?Math.floor(duration/1e3)+" seconds":moment.duration(duration).humanize())}});
"use strict";angular.module("asymmetrik.util").factory("Alerts",["$timeout",function($timeout){function clearAllAlerts(){for(var i=0;i<data.alerts.list.length;i++)data.alerts.list.pop();data.alerts.map={}}function clearAlert(index){var alert=data.alerts.list[index];data.alerts.list.splice(index,1),delete data.alerts.map[alert.id]}function clearAlertById(id){var alert=data.alerts.map[id];if(null!=alert){var index=data.alerts.list.indexOf(alert);clearAlert(index)}}function addAlert(msg,type,ttl){var alert={id:data.id++,type:type||data.defaultType,msg:msg};data.alerts.list.push(alert),data.alerts.map[alert.id]=alert,null!=ttl&&$timeout(function(){clearAlertById(alert.id)},ttl)}var data={id:0,alerts:{list:[],map:{}},defaultType:"danger"};return{alerts:data.alerts.list,clearAll:clearAllAlerts,clear:clearAlert,add:addAlert}}]);